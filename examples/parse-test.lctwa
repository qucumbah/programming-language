func functionName(
  jde: i32,
  arg2: f32,
): i32 {
  // Function code
  if (literal) {
    while (5) {
    }
  }

  while (5-1) {
    statement;statement;3+3;
    var somever :f32=     32324
    ;
  }


  var variableName: f32 = -jde;
  return arg2 + -3;

  var test: i32 = 4 * 3 + 5 * 3 + 4 * 3 + 4 * 3 + 4 * 3 + 4 * 3 + 4 * 3 + 4 * 3 + 4 + 4
    <= 3 + 4 * 3 + 4 * 3 + 4 + 4 * 3 + 4 * 3 > 2 * 5 + 3 * 5 + 3 == 5 + 3 * 5 + 3 * 5 + 3
    / 4 * 3 + 4 + 4 * 3 + 4 * 3 == 4 * -3 + 4 + 4 / 3 + 4 * 3 + 4 * 3 * 4 * 5 + 3 * 5 + 3;
  var test: i32 = 4 * (3 + 5);
  var test: i32 = 5 <= 4 * (3 + 5);
  var test: i32 = (5 <= 4) * (3 + 5);
  var test: i32 = (5 <= 4) * 3 + 5;

  test = (5 + 3) * functionCall();
  test = functionCall(arg1, 135, 5 <= 4, composite(-arg),);

  ident;
  funccall();

  1 + 2 + 3;
  1 * 2 + 3;
  1 + 2 * 3;

  1 <= 5;
}
